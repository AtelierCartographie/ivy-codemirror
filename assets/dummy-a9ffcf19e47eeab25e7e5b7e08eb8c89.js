"use strict";define("dummy/app",["exports","ember","dummy/resolver","ember-load-initializers","dummy/config/environment"],function(e,n,t,i,l){Object.defineProperty(e,"__esModule",{value:!0});var o=void 0;n.default.MODEL_FACTORY_INJECTIONS=!0,o=n.default.Application.extend({modulePrefix:l.default.modulePrefix,podModulePrefix:l.default.podModulePrefix,Resolver:t.default}),(0,i.default)(o,l.default.modulePrefix),e.default=o}),define("dummy/components/ivy-codemirror",["exports","ivy-codemirror/components/ivy-codemirror"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return n.default}})}),define("dummy/controllers/index",["exports","ember","dummy/config/environment"],function(e,n,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=n.default.Controller.extend({lineNumbers:!0,lineWrapping:!1,mode:"javascript",keyMap:"default",readOnly:!1,smartIndent:!0,tabSize:4,theme:"ambiance",value:t.default.APP.codeSample,modes:n.default.A(["apl","asciiarmor","asn.1","asterisk","clike","clojure","cmake","cobol","coffeescript","commonlisp","css","cypher","d","dart","diff","django","dockerfile","dtd","dylan","ebnf","ecl","eiffel","erlang","forth","fortran","gas","gfm","gherkin","go","groovy","haml","haskell","haxe","htmlembedded","htmlmixed","http","idl","jade","javascript","jinja2","julia","kotlin","livescript","lua","markdown","mathematica","mirc","mllike","modelica","mumps","nginx","ntriples","octave","pascal","pegjs","perl","php","pig","properties","puppet","python","q","r","rpm","rst","ruby","rust","sass","scheme","shell","sieve","slim","smalltalk","smarty","solr","soy","sparql","spreadsheet","sql","stex","tcl","textile","tiddlywiki","tiki","toml","tornado","troff","ttcn","ttcn-cfg","turtle","vb","vbscript","velocity","verilog","xml","xquery","yaml","z80"]),keyMaps:n.default.A(["basic","default","emacs","sublime","vim"]),themes:n.default.A(["3024-day","3024-night","ambiance","ambiance-mobile","base16-dark","base16-light","blackboard","cobalt","eclipse","elegant","erlang-dark","lesser-dark","mbo","mdn-like","midnight","monokai","neat","neo","night","paraiso-dark","paraiso-light","pastel-on-dark","rubyblue","solarized","the-matrix","tomorrow-night-eighties","twilight","vibrant-ink","xq-dark","xq-light"])})}),define("dummy/helpers/eq",["exports","ember"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=n.default.Helper.helper(function(e){return e[0]===e[1]})}),define("dummy/initializers/container-debug-adapter",["exports","ember-resolver/resolvers/classic/container-debug-adapter"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"container-debug-adapter",initialize:function(){var e=arguments[1]||arguments[0];e.register("container-debug-adapter:main",n.default),e.inject("container-debug-adapter:main","namespace","application:main")}}}),define("dummy/initializers/export-application-global",["exports","ember","dummy/config/environment"],function(e,n,t){function i(){var e=arguments[1]||arguments[0];if(!1!==t.default.exportApplicationGlobal){var i;if("undefined"!=typeof window)i=window;else if("undefined"!=typeof global)i=global;else{if("undefined"==typeof self)return;i=self}var l,o=t.default.exportApplicationGlobal;l="string"==typeof o?o:n.default.String.classify(t.default.modulePrefix),i[l]||(i[l]=e,e.reopen({willDestroy:function(){this._super.apply(this,arguments),delete i[l]}}))}}Object.defineProperty(e,"__esModule",{value:!0}),e.initialize=i,e.default={name:"export-application-global",initialize:i}}),define("dummy/resolver",["exports","ember-resolver"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=n.default}),define("dummy/router",["exports","ember","dummy/config/environment"],function(e,n,t){Object.defineProperty(e,"__esModule",{value:!0});var i=n.default.Router.extend({location:t.default.locationType,rootURL:t.default.rootURL});i.map(function(){}),e.default=i}),define("dummy/services/code-mirror",["exports","ivy-codemirror/services/code-mirror"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return n.default}})}),define("dummy/templates/application",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=Ember.HTMLBars.template({id:"1JygP6uU",block:'{"statements":[[11,"div",[]],[15,"class","container"],[13],[0,"\\n  "],[1,[26,["outlet"]],false],[0,"\\n"],[14],[0,"\\n"]],"locals":[],"named":[],"yields":[],"hasPartials":false}',meta:{moduleName:"dummy/templates/application.hbs"}})}),define("dummy/templates/index",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=Ember.HTMLBars.template({id:"FXioNTr4",block:'{"statements":[[11,"h1",[]],[15,"class","page-header"],[13],[0,"ivy-codemirror"],[14],[0,"\\n\\n"],[11,"div",[]],[15,"class","row"],[13],[0,"\\n  "],[11,"div",[]],[15,"class","col-sm-9"],[13],[0,"\\n    "],[1,[33,["ivy-codemirror"],null,[["options","value","valueUpdated"],[[33,["hash"],null,[["lineNumbers","lineWrapping","mode","keyMap","readOnly","smartIndent","styleActiveLine","theme"],[[28,["lineNumbers"]],[28,["lineWrapping"]],[28,["mode"]],[28,["keyMap"]],[28,["readOnly"]],[28,["smartIndent"]],[28,["styleActiveLine"]],[28,["theme"]]]]],[28,["value"]],[33,["action"],[[28,[null]],[33,["mut"],[[28,["value"]]],null]],null]]]],false],[0,"\\n  "],[14],[0,"\\n\\n  "],[11,"div",[]],[15,"class","col-sm-3"],[13],[0,"\\n    "],[11,"div",[]],[15,"class","form-group"],[13],[0,"\\n      "],[11,"label",[]],[15,"class","control-label"],[15,"for","mode"],[13],[0,"Mode"],[14],[0,"\\n      "],[11,"select",[]],[15,"class","form-control"],[15,"id","mode"],[16,"onchange",[33,["action"],[[28,[null]],[33,["mut"],[[28,["mode"]]],null]],[["value"],["target.value"]]],null],[13],[0,"\\n"],[6,["each"],[[28,["modes"]]],null,{"statements":[[0,"          "],[11,"option",[]],[16,"selected",[33,["eq"],[[28,["mode"]],[28,["modeChoice"]]],null],null],[16,"value",[34,[[28,["modeChoice"]]]]],[13],[1,[28,["modeChoice"]],false],[14],[0,"\\n"]],"locals":["modeChoice"]},null],[0,"      "],[14],[0,"\\n    "],[14],[0,"\\n\\n    "],[11,"div",[]],[15,"class","form-group"],[13],[0,"\\n      "],[11,"label",[]],[15,"class","control-label"],[15,"for","key-map"],[13],[0,"Key map"],[14],[0,"\\n      "],[11,"select",[]],[15,"class","form-control"],[15,"id","key-map"],[16,"onchange",[33,["action"],[[28,[null]],[33,["mut"],[[28,["keyMap"]]],null]],[["value"],["target.value"]]],null],[13],[0,"\\n"],[6,["each"],[[28,["keyMaps"]]],null,{"statements":[[0,"          "],[11,"option",[]],[16,"selected",[33,["eq"],[[28,["keyMap"]],[28,["keyMapChoice"]]],null],null],[16,"value",[34,[[28,["keyMapChoice"]]]]],[13],[1,[28,["keyMapChoice"]],false],[14],[0,"\\n"]],"locals":["keyMapChoice"]},null],[0,"      "],[14],[0,"\\n    "],[14],[0,"\\n\\n    "],[11,"div",[]],[15,"class","form-group"],[13],[0,"\\n      "],[11,"label",[]],[15,"class","control-label"],[15,"for","theme"],[13],[0,"Theme"],[14],[0,"\\n      "],[11,"select",[]],[15,"class","form-control"],[15,"id","theme"],[16,"onchange",[33,["action"],[[28,[null]],[33,["mut"],[[28,["theme"]]],null]],[["value"],["target.value"]]],null],[13],[0,"\\n"],[6,["each"],[[28,["themes"]]],null,{"statements":[[0,"          "],[11,"option",[]],[16,"selected",[33,["eq"],[[28,["theme"]],[28,["themeChoice"]]],null],null],[16,"value",[34,[[28,["themeChoice"]]]]],[13],[1,[28,["themeChoice"]],false],[14],[0,"\\n"]],"locals":["themeChoice"]},null],[0,"      "],[14],[0,"\\n    "],[14],[0,"\\n\\n    "],[11,"div",[]],[15,"class","checkbox"],[13],[0,"\\n      "],[11,"label",[]],[13],[0,"\\n        "],[1,[33,["input"],null,[["checked","type"],[[28,["lineNumbers"]],"checkbox"]]],false],[0," Line numbers\\n      "],[14],[0,"\\n    "],[14],[0,"\\n\\n    "],[11,"div",[]],[15,"class","checkbox"],[13],[0,"\\n      "],[11,"label",[]],[13],[0,"\\n        "],[1,[33,["input"],null,[["checked","type"],[[28,["lineWrapping"]],"checkbox"]]],false],[0," Line wrapping\\n      "],[14],[0,"\\n    "],[14],[0,"\\n\\n    "],[11,"div",[]],[15,"class","checkbox"],[13],[0,"\\n      "],[11,"label",[]],[13],[0,"\\n        "],[1,[33,["input"],null,[["checked","type"],[[28,["readOnly"]],"checkbox"]]],false],[0," Read-only\\n      "],[14],[0,"\\n    "],[14],[0,"\\n\\n    "],[11,"div",[]],[15,"class","checkbox"],[13],[0,"\\n      "],[11,"label",[]],[13],[0,"\\n        "],[1,[33,["input"],null,[["checked","type"],[[28,["smartIndent"]],"checkbox"]]],false],[0," Smart indent\\n      "],[14],[0,"\\n    "],[14],[0,"\\n\\n    "],[11,"div",[]],[15,"class","checkbox"],[13],[0,"\\n      "],[11,"label",[]],[13],[0,"\\n        "],[1,[33,["input"],null,[["checked","type"],[[28,["styleActiveLine"]],"checkbox"]]],false],[0," Style active line\\n      "],[14],[0,"\\n    "],[14],[0,"\\n  "],[14],[0,"\\n"],[14],[0,"\\n"]],"locals":[],"named":[],"yields":[],"hasPartials":false}',meta:{moduleName:"dummy/templates/index.hbs"}})}),define("dummy/config/environment",["ember"],function(e){try{var n="dummy/config/environment",t=document.querySelector('meta[name="'+n+'"]').getAttribute("content"),i=JSON.parse(unescape(t)),l={default:i};return Object.defineProperty(l,"__esModule",{value:!0}),l}catch(e){throw new Error('Could not read config from meta tag with name "'+n+'".')}}),runningTests||require("dummy/app").default.create({codeSample:"import Component from 'ember-component';\nimport injectService from 'ember-service/inject';\nimport observer from 'ember-metal/observer';\nimport { bind, once, scheduleOnce } from 'ember-runloop';\n\nexport default Component.extend({\n  tagName: 'textarea',\n\n  codeMirror: injectService(),\n\n  didInsertElement() {\n    this._super(...arguments);\n\n    this._codeMirror = this.get('codeMirror').fromTextArea(this.get('elementId'), this.get('element'));\n\n    // Send a \"valueUpdated\" action when CodeMirror triggers a \"change\" event.\n    this.setupCodeMirrorEventHandler('change', this, this.scheduleValueUpdatedAction);\n  },\n\n  didRender() {\n    this._super(...arguments);\n\n    this.updateCodeMirrorOptions();\n    this.updateCodeMirrorValue();\n  },\n\n  isVisibleDidChange: observer('isVisible', function() {\n    if (this._wasVisible === this.get('isVisible')) {\n      return;\n    }\n\n    scheduleOnce('render', this, this.toggleVisibility);\n  }),\n\n  scheduleValueUpdatedAction(codeMirror, changeObj) {\n    once(this, this.sendValueUpdatedAction, codeMirror.getValue(), codeMirror, changeObj);\n  },\n\n  setupCodeMirrorEventHandler(event, target, method) {\n    const callback = bind(target, method);\n\n    this._codeMirror.on(event, callback);\n\n    this.one('willDestroyElement', this, function() {\n      this._codeMirror.off(event, callback);\n    });\n  },\n\n  sendValueUpdatedAction(...args) {\n    this.sendAction('valueUpdated', ...args);\n  },\n\n  toggleVisibility() {\n    const isVisible = this.get('isVisible');\n\n    if (this._wasVisible === isVisible) {\n      return;\n    }\n\n    this._wasVisible = isVisible;\n\n    if (isVisible) {\n      // Force a refresh when becoming visible, since CodeMirror won't render\n      // itself onto a hidden element.\n      this._codeMirror.refresh();\n    }\n  },\n\n  updateCodeMirrorOption(option, value) {\n    if (this._codeMirror.getOption(option) !== value) {\n      this._codeMirror.setOption(option, value);\n    }\n  },\n\n  updateCodeMirrorOptions() {\n    const options = this.get('options');\n\n    if (options) {\n      Object.keys(options).forEach(function(option) {\n        this.updateCodeMirrorOption(option, options[option]);\n      }, this);\n    }\n  },\n\n  updateCodeMirrorValue() {\n    const value = this.get('value');\n\n    if (value !== this._codeMirror.getValue()) {\n      this._codeMirror.setValue(value || '');\n    }\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n\n    // Remove the editor and restore the original textarea.\n    this._codeMirror.toTextArea();\n\n    this.get('codeMirror').unregisterInstance(this.get('elementId'));\n\n    delete this._codeMirror;\n  }\n});\n"});